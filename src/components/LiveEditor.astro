---
interface Props {
  class?: string;
  initialHtml?: string;
  initialCss?: string;
  initialJs?: string;
  localStorageKey?: string;
}

const {
  initialHtml = "",
  initialCss = "",
  initialJs = "",
  class: className = "",
  localStorageKey,
} = Astro.props;

// Important! This component is not compatible with Astro's view transitions:
// when navigating to this page after a view transition, the editor will not be initialized.
---

<div
  class={`live-editor live-editor--static grid grid-rows-5 flex-1 w-full h-full border border-gray-700 ${className}`}
  data-storage-key={localStorageKey}
>
  <div
    class="row-span-2 flex flex-col bg-[#1E1E1E] border-b border-neutral-700 max-w-full"
  >
    <div class="flex bg-neutral-700">
      <button class="tab active" data-target="html">HTML</button>
      <button class="tab" data-target="css">CSS</button>
      <button class="tab" data-target="js">JavaScript</button>
    </div>
    <div id="html-editor" class="editor active">{initialHtml}</div>
    <div id="css-editor" class="editor hidden">{initialCss}</div>
    <div id="js-editor" class="editor hidden">{initialJs}</div>
  </div>
  <div class="row-span-3 flex flex-col bg-black">
    <h3 class="bg-neutral-700 text-white text-sm font-bold px-4 py-3">
      Preview
    </h3>
    <iframe class="flex-1 border-none"></iframe>
  </div>
</div>

<script>
  import { css } from "@codemirror/lang-css";
import { html } from "@codemirror/lang-html";
import { javascript } from "@codemirror/lang-javascript";
import type { Extension } from "@codemirror/state";
import { vscodeDark } from "@uiw/codemirror-theme-vscode";
import { EditorView, basicSetup } from "codemirror";
import { debounce } from "lodash-es";

  function createEditor(
    editorContainer: Element,
    selector: string,
    langExtension: Extension,
  ) {
    const editorElement = editorContainer.querySelector(selector)!;
    const initialCode = editorElement.textContent || "";
    editorElement.textContent = "";

    const codeEditor = new EditorView({
      doc: initialCode,
      extensions: [
        basicSetup,
        langExtension,
        vscodeDark,
        EditorView.lineWrapping,
      ],
      parent: editorElement,
    });

    return codeEditor;
  }

  function setupEditor(editorContainer: Element) {
    editorContainer.classList.remove("live-editor--static");
    const htmlEditor = createEditor(
      editorContainer,
      "#html-editor",
      html({
        autoCloseTags: true,
        matchClosingTags: true,
      }),
    );
    const cssEditor = createEditor(editorContainer, "#css-editor", css());
    const jsEditor = createEditor(editorContainer, "#js-editor", javascript());

    const preview = editorContainer.querySelector(
      "iframe",
    ) as HTMLIFrameElement;

    const storageKey = editorContainer.getAttribute("data-storage-key");

    // Load saved content from localStorage if storageKey is provided
    if (storageKey) {
      const savedContent = localStorage.getItem(storageKey);
      if (savedContent) {
        const { html, css, js } = JSON.parse(savedContent);
        htmlEditor.dispatch({
          changes: { from: 0, to: htmlEditor.state.doc.length, insert: html },
        });
        cssEditor.dispatch({
          changes: { from: 0, to: cssEditor.state.doc.length, insert: css },
        });
        jsEditor.dispatch({
          changes: { from: 0, to: jsEditor.state.doc.length, insert: js },
        });
      }
    }

    const saveToLocalStorage = storageKey
      ? debounce(() => {
          const content = {
            html: htmlEditor.state.doc.toString(),
            css: cssEditor.state.doc.toString(),
            js: jsEditor.state.doc.toString(),
          };
          localStorage.setItem(storageKey, JSON.stringify(content));
        }, 400)
      : () => {};

    function updatePreview() {
      const htmlContent = htmlEditor.state.doc.toString();
      const cssContent = cssEditor.state.doc.toString();
      const jsContent = jsEditor.state.doc.toString();

      const content = `<html>
        <head><style>${cssContent}</style></head>
        <body>
          ${htmlContent}
          <script>${jsContent}<\/script>
        </body>
      </html>`;

      preview.srcdoc = content.trim();
      saveToLocalStorage();
    }

    htmlEditor.dom.addEventListener("keyup", debounce(updatePreview, 200));
    cssEditor.dom.addEventListener("keyup", debounce(updatePreview, 200));
    jsEditor.dom.addEventListener("keyup", debounce(updatePreview, 200));

    // Tab switching logic
    const tabs = editorContainer.querySelectorAll(".tab");
    const editors = editorContainer.querySelectorAll(".editor");

    tabs.forEach((tab) => {
      tab.addEventListener("click", () => {
        const target = tab.getAttribute("data-target");
        tabs.forEach((t) => t.classList.remove("active"));
        editors.forEach((e) => e.classList.add("hidden"));
        tab.classList.add("active");
        editorContainer
          .querySelector(`#${target}-editor`)
          ?.classList.remove("hidden");
      });
    });
    updatePreview();
  }

  document.querySelectorAll(".live-editor").forEach(setupEditor);
</script>

<style is:global>
  @import "https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.css";
  @import "https://fonts.googleapis.com/css2?family=Fira+Code&display=swap";

  .cm-editor .cm-scroller {
    font-family: "Fira Code", monospace;
    font-size: 14px;
    flex-grow: 1;
  }

  .tab {
    @apply text-white text-sm font-bold px-4 py-3 cursor-pointer h-auto;
  }

  .tab.active {
    @apply bg-neutral-600;
  }

  .editor {
    @apply flex-1 max-h-full max-w-full overflow-auto;
  }

  .live-editor--static {
    opacity: 0.3;
    cursor: not-allowed;
    * {
      cursor: not-allowed;
      pointer-events: none;
    }
  }
</style>
